# -*- coding: utf-8 -*-
"""
/***************************************************************************
 buildSeg
                                 A QGIS plugin
 Deep learning building segmentation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-11-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by geoyee
        email                : geoyee@yeah.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .buildSeg_dialog import buildSegDialog
import os.path
# tools
from qgis.utils import iface
from qgis.core import QgsMapLayerProxyModel, QgsVectorFileWriter, QgsProject
from .utils import *
import os.path as osp
# DEBUG
# import cv2


class buildSeg:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'buildSeg_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&buildSeg')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.param_file = None
        self.model_file = None
        self.infer_worker = None
        self.save_shp_path = None

        # Init block and overlap size
        self.block_size_list = [512]
        self.overlap_size_list = [2, 4, 8, 16, 32, 64, 128, 256]

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('buildSeg', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/buildSeg/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'buildseg bar'),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        # initialization
        self.infer_worker = None


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&buildSeg'),
                action)
            self.iface.removeToolBarIcon(action)


    # Load parameters
    def select_params_file(self):
        self.param_file = self.dlg.mQfwParams.filePath()
        self.model_file = self.param_file.replace(".pdiparams", ".pdmodel")
        if osp.exists(self.model_file):
            if self.infer_worker is not None:
                self.infer_worker.load_model(self.model_file, self.param_file, \
                                            use_gpu=self.dlg.ccbGPU.isChecked())
                print("Parameters loaded successfully")
        else:
            print(f"Parameters loaded unsuccessfully, not find {self.model_file}")

    
    def select_shp_save(self):
        self.save_shp_path = self.dlg.mQfwShape.filePath()


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        self.dlg = buildSegDialog()
        # Add event
        # self.dlg.btnParams.clicked.connect(self.select_params_file)
        self.dlg.mQfwParams.setFilter("*.pdiparams")
        self.dlg.mQfwShape.setFilter("*.shp")
        self.dlg.mQfwParams.fileChanged.connect(self.select_params_file)  # load params
        self.dlg.mQfwShape.fileChanged.connect(self.select_shp_save)
        self.dlg.mMapLayerComboBoxR.setFilters(QgsMapLayerProxyModel.RasterLayer)

        # show the dialog
        self.dlg.show()
        self.dlg.cbxBlock.addItems([str(s) for s in self.block_size_list])
        self.dlg.cbxOverlap.addItems([str(s) for s in self.overlap_size_list])
        self.dlg.cbxOverlap.setCurrentIndex(4)  # default 32
        self.infer_worker = InferWorker(self.model_file, self.param_file, \
                                        use_gpu=self.dlg.ccbGPU.isChecked())
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # layers = iface.activeLayer()  # Get the currently active layer
            layers = self.dlg.mMapLayerComboBoxR.currentLayer()  # Get the selected raster layer
            grid_size = [int(self.dlg.cbxBlock.currentText())] * 2
            overlap = [int(self.dlg.cbxOverlap.currentText())] * 2
            proj = layers.crs()
            # If this layer is a raster layer
            xsize, ysize = layers.width(), layers.height()
            grid_count, mask_grids = create_grids(ysize, xsize, grid_size, overlap)
            number = grid_count[0] * grid_count[1]
            # print(f"xsize is {xsize}, ysize is {ysize}, grid_count is {grid_count}")  # test
            print("Start block processing")
            for i in range(grid_count[0]):
                for j in range(grid_count[1]):
                    img = layer2array(layers, i, j, grid_size, overlap)
                    # cv2.imwrite("C:/Users/Geoyee/Desktop/grids/" + str(i) + "-" + str(j) + ".jpg", img)  # test
                    mask_grids[i][j] = self.infer_worker.infer(img, True)
                    # cv2.imwrite("C:/Users/Geoyee/Desktop/grids/" + str(i) + "-" + str(j) + ".png", mask_grids[i][j])  # test
                    print(f"-- {i * grid_count[1] + j + 1}/{number} --")
            print("Start Spliting")
            mask = splicing_grids(mask_grids, ysize, xsize, grid_size, overlap)
            # cv2.imwrite("C:/Users/Geoyee/Desktop/test.png", mask)  # test
            print("Start to extract the boundary")
            # # raster to shapefile used OpenCV
            # build_bound = bound2shp(get_polygon(mask), 
            #                         get_transform(layers))
            # vl = showgeoms([build_bound], "Building boundary", proj=proj)
            # if self.save_shp_path is not None:
            #     QgsVectorFileWriter.writeAsVectorFormat(
            #         vl, self.save_shp_path, "utf-8", 
            #         driverName="ESRI Shapefile")
            #     print(f"Save the Shapefile in {self.save_shp_path}")
            # # raster to shapefile used GDAL
            polygonize_raster(mask, self.save_shp_path, get_transform(layers, False), proj, False)
        # Reset model params
        self.infer_worker.reset_model()